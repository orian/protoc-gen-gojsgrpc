// Code generated by protoc-gen-go.
// source: grpc.proto
// DO NOT EDIT!

/*
Package testing is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	SimpleRequest
	SimpleResponse
	StreamMsg
	StreamMsg2
	Args
	Result
*/
package testing

import proto "github.com/golang/protobuf/proto"

import (
	"encoding/json"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	jsgrpc "github.com/orian/jsgrpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Args_Operation int32

const (
	Args_NONE Args_Operation = 0
	Args_SUM  Args_Operation = 1
	Args_SUB  Args_Operation = 2
	Args_MULT Args_Operation = 3
	Args_DIV  Args_Operation = 4
	Args_MIN  Args_Operation = 5
	Args_MAX  Args_Operation = 6
)

var Args_Operation_name = map[int32]string{
	0: "NONE",
	1: "SUM",
	2: "SUB",
	3: "MULT",
	4: "DIV",
	5: "MIN",
	6: "MAX",
}
var Args_Operation_value = map[string]int32{
	"NONE": 0,
	"SUM":  1,
	"SUB":  2,
	"MULT": 3,
	"DIV":  4,
	"MIN":  5,
	"MAX":  6,
}

func (x Args_Operation) String() string {
	return proto.EnumName(Args_Operation_name, int32(x))
}

type SimpleRequest struct {
}

func (m *SimpleRequest) Reset()         { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()    {}

type SimpleResponse struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}

type StreamMsg struct {
}

func (m *StreamMsg) Reset()         { *m = StreamMsg{} }
func (m *StreamMsg) String() string { return proto.CompactTextString(m) }
func (*StreamMsg) ProtoMessage()    {}

type StreamMsg2 struct {
}

func (m *StreamMsg2) Reset()         { *m = StreamMsg2{} }
func (m *StreamMsg2) String() string { return proto.CompactTextString(m) }
func (*StreamMsg2) ProtoMessage()    {}

type Args struct {
	Nums []float32      `protobuf:"fixed32,1,rep,name=nums" json:"nums,omitempty"`
	Op   Args_Operation `protobuf:"varint,2,opt,name=op,enum=testing.Args_Operation" json:"op,omitempty"`
}

func (m *Args) Reset()         { *m = Args{} }
func (m *Args) String() string { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()    {}

type Result struct {
	Res float32 `protobuf:"fixed32,1,opt,name=res" json:"res,omitempty"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("testing.Args_Operation", Args_Operation_name, Args_Operation_value)
}

// Client API for Test service

type TestClient interface {
	UnaryCall(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Math(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Result, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) UnaryCall(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := jsgrpc.Invoke(ctx, "/testing.Test/UnaryCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Math(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := jsgrpc.Invoke(ctx, "/testing.Test/Math", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestServer interface {
	UnaryCall(context.Context, *SimpleRequest) (*SimpleResponse, error)
	Math(context.Context, *Args) (*Result, error)
}

func RegisterTestServer(s *jsgrpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_UnaryCall_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(SimpleRequest)
	if err := json.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TestServer).UnaryCall(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Test_Math_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(Args)
	if err := json.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(TestServer).Math(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _Test_UnaryCall_Handler,
		},
		{
			MethodName: "Math",
			Handler:    _Test_Math_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
